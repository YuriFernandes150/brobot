"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const igdb_url_1 = require("./igdb-url");
const got_1 = __importDefault(require("got"));
class IGDBEndpoint {
    /**
     * Setting up the endpoint instance
     * @param igdb_api_key API key received from IGDB
     */
    constructor(igdb_api_key) {
        /**
         * URL Helper class
         */
        this.IGDBUrl = new igdb_url_1.IGDBUrl();
        this.API_KEY = igdb_api_key;
    }
    /**
     * Sending the actual request
     * @param endpoint An IGDB endpoint to query
     * @param options An options object to customize the query
     */
    request(endpoint, options) {
        const headers = {
            'user-key': this.API_KEY,
            'Accept': 'application/json'
        };
        return got_1.default.get(this.IGDBUrl.queryUrl(endpoint, options), { headers: headers });
    }
    /**
     * Return the request as a promise.
     * @param endpoint The endpoint to get the data from
     * @param options An options object for the request
     */
    asPromise(endpoint, options) {
        return new Promise((resolve, reject) => {
            this.request(endpoint, options)
                .then((response) => {
                // If the request was successful resolve the body of the response as a JSON
                resolve(options.count && options.count == true ? [JSON.parse(response.body)] : JSON.parse(response.body));
            })
                .catch((error) => {
                // In case of any error, reject the error object
                reject(error);
            });
        });
    }
    /**
     * Fetch data using ACHIEVEMENTS endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/achievements
     */
    achievements(options) { return this.asPromise('achievements', options); }
    /**
     * Fetch data using CHARACTER endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/character
     */
    character(options) { return this.asPromise('characters', options); }
    /**
     * Fetch data using COLLECTION endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/collection
     */
    collection(options) { return this.asPromise('collections', options); }
    /**
     * Fetch data using COMPANY endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/company
     */
    company(options) { return this.asPromise('companies', options); }
    /**
     * Fetch data using CREDITS endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/credits
     */
    credits(options) { return this.asPromise('credits', options); }
    /**
     * Fetch data using ACHIEVEMENTS endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/achievements
     */
    feed(options) { return this.asPromise('feeds', options); }
    /**
     * Fetch data using EXTERNAL REVIEW endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/external-review
     */
    externalReview(options) { return this.asPromise('external_reviews', options); }
    /**
     * Fetch data using EXTERNAL REVIEW SOURCE endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/external-review-source
     */
    externalReviewSource(options) { return this.asPromise('external_review_sources', options); }
    /**
     * Fetch data using FRANCHISE endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/franchise
     */
    franchise(options) { return this.asPromise('franchises', options); }
    /**
     * Fetch data using GAME endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/game
     */
    game(options) { return this.asPromise('games', options); }
    /**
     * Fetch data using GAME ENGINE endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/game-engine
     */
    gameEngine(options) { return this.asPromise('game_engines', options); }
    /**
     * Fetch data using GAME MODE endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/game-mode
     */
    gameMode(options) { return this.asPromise('game_modes', options); }
    /**
     * Fetch data using GENRE endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/genre
     */
    genre(options) { return this.asPromise('genres', options); }
    /**
     * Fetch data using KEYWORD endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/keyword
     */
    keyword(options) { return this.asPromise('keywords', options); }
    /**
     * Fetch data using PAGE endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/page
     */
    page(options) { return this.asPromise('pages', options); }
    /**
     * Fetch data using PERSON endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/person
     */
    person(options) { return this.asPromise('persons', options); }
    /**
     * Fetch data using PLATFORM endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/platform
     */
    platform(options) { return this.asPromise('platforms', options); }
    /**
     * Fetch data using PLAYER PERSPECTIVE endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/player-perspective
     */
    playerPerspective(options) { return this.asPromise('player_perspectives', options); }
    /**
     * Fetch data using PULSE endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/pulse
     */
    pulse(options) { return this.asPromise('pulses', options); }
    /**
     * Fetch data using PULSE GROUP endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/pulse-groups
     */
    pulseGroup(options) { return this.asPromise('pulse_groups', options); }
    /**
     * Fetch data using PULSE SOURCE endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/pulse-source
     */
    pulseSource(options) { return this.asPromise('pulse_sources', options); }
    /**
     * Fetch data using RELEASE DATE endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/release-date
     */
    releaseDate(options) { return this.asPromise('release_dates', options); }
    /**
     * Fetch data using REVIEW endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/review
     */
    review(options) { return this.asPromise('reviews', options); }
    /**
     * Fetch data using THEME endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/theme
     */
    theme(options) { return this.asPromise('themes', options); }
    /**
     * Fetch data using TITLE endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/title
     */
    title(options) { return this.asPromise('titles', options); }
    /**
     * Fetch data using USER PROFILE endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/me
     */
    userProfile(options) { return this.asPromise('me', options); }
    /**
     * Fetch data using VERSIONS endpoint
     * @param options An option object to customize the query
     * @link https://igdb.github.io/api/endpoints/version
     */
    gameVersion(options) { return this.asPromise('game_versions', options); }
}
exports.IGDBEndpoint = IGDBEndpoint;
