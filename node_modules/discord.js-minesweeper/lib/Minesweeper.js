"use strict";
class Minesweeper {
    /**
     * The constructor of the Minesweeper class.
     * @constructor
     * @param {MinesweeperOpts} opts - The options of the Minesweeper class.
     */
    constructor(opts = undefined) {
        this.rows = (opts && opts.rows) || 9;
        this.columns = (opts && opts.columns) || 9;
        this.mines = (opts && opts.mines) || 10;
        this.emote = (opts && opts.emote) || 'boom';
        this.spaces = opts && opts.spaces !== undefined ? opts.spaces : true;
        this.returnType = (opts && opts.returnType) || 'emoji';
        this.matrix = [];
        this.types = {
            mine: this.spoilerize(this.emote),
            numbers: ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight'].map(n => this.spoilerize(n))
        };
    }
    /**
     * Turns a text into a Discord spoiler.
     * @param {string} str - The string to spoilerize.
     * @returns {string}
     */
    spoilerize(str) {
        return this.spaces
            ? `|| :${str}: ||`
            : `||:${str}:||`;
    }
    /**
     * Fills the matrix with "zero" emojis.
     */
    generateEmptyMatrix() {
        for (let i = 0; i < this.rows; i++) {
            const arr = new Array(this.columns).fill(this.types.numbers[0]);
            this.matrix.push(arr);
        }
    }
    /**
     * Plants mines in the matrix randomly.
     */
    plantMines() {
        for (let i = 0; i < this.mines; i++) {
            const x = Math.floor(Math.random() * this.rows);
            const y = Math.floor(Math.random() * this.columns);
            if (this.matrix[x][y] === this.types.mine) {
                i--;
            }
            else {
                this.matrix[x][y] = this.types.mine;
            }
        }
    }
    /**
     * Gets the number of mines in a particular (x, y) coordinate
     * of the matrix.
     * @param {number} x - The x coordinate (row).
     * @param {number} y - The y coordinate (column).
     * @returns {string}
     */
    getNumberOfMines(x, y) {
        if (this.matrix[x][y] === this.types.mine) {
            return this.types.mine;
        }
        let counter = 0;
        const hasLeft = y > 0;
        const hasRight = y < (this.columns - 1);
        const hasTop = x > 0;
        const hasBottom = x < (this.rows - 1);
        // top left
        counter += +(hasTop && hasLeft && this.matrix[x - 1][y - 1] === this.types.mine);
        // top
        counter += +(hasTop && this.matrix[x - 1][y] === this.types.mine);
        // top right
        counter += +(hasTop && hasRight && this.matrix[x - 1][y + 1] === this.types.mine);
        // left
        counter += +(hasLeft && this.matrix[x][y - 1] === this.types.mine);
        // right
        counter += +(hasRight && this.matrix[x][y + 1] === this.types.mine);
        // bottom left
        counter += +(hasBottom && hasLeft && this.matrix[x + 1][y - 1] === this.types.mine);
        // bottom
        counter += +(hasBottom && this.matrix[x + 1][y] === this.types.mine);
        // bottom right
        counter += +(hasBottom && hasRight && this.matrix[x + 1][y + 1] === this.types.mine);
        return this.types.numbers[counter];
    }
    /**
     * Returns the Discord message equivalent of the mine field.
     * @returns {string}
     */
    getTextRepresentation() {
        const separator = this.spaces ? ' ' : '';
        return this.matrix.map(r => r.join(separator)).join('\n');
    }
    /**
     * Generates a minesweeper mine field and returns it.
     * @returns {(string | string[][] | null)}
     */
    start() {
        if (this.rows * this.columns <= this.mines * 2) {
            return null;
        }
        this.generateEmptyMatrix();
        this.plantMines();
        this.matrix = this.matrix.map((row, x) => {
            return row.map((col, y) => this.getNumberOfMines(x, y));
        });
        switch (this.returnType) {
            case 'emoji':
                return this.getTextRepresentation();
            case 'code':
                return `\`\`\`${this.getTextRepresentation()}\`\`\``;
            case 'matrix':
                return this.matrix;
        }
    }
}
module.exports = Minesweeper;
