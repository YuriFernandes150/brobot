"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var https = require("https");
var xml2js_1 = require("xml2js");
var currencies_1 = require("./currencies");
var CurrencyConverter = /** @class */ (function () {
    function CurrencyConverter() {
        this.ECB_RATES_URL = 'https://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml';
        this.isLoaded = false;
        this.rates = CurrencyConverter.emptyRatesObject();
    }
    /**
     * Get the rates from the ECB server.
     * @param {Currency} base The base currency to use.
     * @param {boolean} reload If the data should be reloaded from ECB, default is false.
     * @return {Promise<Rates>} A promise that will give the rates.
     */
    CurrencyConverter.prototype.getRates = function (base, reload) {
        var _this = this;
        if (reload === void 0) { reload = false; }
        return new Promise(function (resolve, reject) {
            // Use cached data if available
            if (_this.isLoaded && !reload) {
                resolve(CurrencyConverter.convertBase(_this.rates, base));
                return;
            }
            // Load the data from ECB
            https.get(_this.ECB_RATES_URL, function (response) {
                response.on('data', function (data) {
                    // Convert from XML to JSON
                    _this.xmlToRates(data.toString())
                        .then(function (rates) {
                        _this.rates = rates;
                        _this.isLoaded = true;
                        resolve(CurrencyConverter.convertBase(_this.rates, base));
                    }, reject);
                });
            });
        });
    };
    CurrencyConverter.convertBase = function (rates, base) {
        var baseRate = rates[base], newRates = CurrencyConverter.emptyRatesObject();
        Object.keys(rates).forEach(function (currency) {
            newRates[currency] = rates[currency] / baseRate;
        });
        return newRates;
    };
    /**
     * Convert between two currencies.
     * @param {ConvertObject} convertObject The currency object that contains info about the conversion.
     * @return {Promise<ConvertedObject>} A promise that will return the new currency and quantity.
     */
    CurrencyConverter.prototype.convert = function (convertObject) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.getRates(currencies_1.Currencies.EUR).then(function (rates) {
                resolve({
                    quantity: convertObject.quantity / rates[convertObject.from]
                        * rates[convertObject.to],
                    currency: convertObject.to
                });
            }, reject);
        });
    };
    CurrencyConverter.prototype.xmlToRates = function (xml) {
        return new Promise(function (resolve, reject) {
            xml2js_1.parseString(xml, { trim: true }, function (error, result) {
                // Check for errors
                if (error !== null) {
                    reject(error);
                    return;
                }
                // Create an empty object
                var rates = CurrencyConverter.emptyRatesObject();
                // Set the values from ECB
                result['gesmes:Envelope'].Cube[0].Cube[0].Cube.forEach(function (rateObject) {
                    var currency = rateObject.$.currency;
                    if (CurrencyConverter.isCurrency(currency)) {
                        rates[currency] = parseFloat(rateObject.$.rate);
                    }
                });
                resolve(rates);
            });
        });
    };
    CurrencyConverter.emptyRatesObject = function () {
        return {
            EUR: 1,
            USD: 0,
            JPY: 0,
            BGN: 0,
            CZK: 0,
            DKK: 0,
            GBP: 0,
            HUF: 0,
            PLN: 0,
            RON: 0,
            SEK: 0,
            CHF: 0,
            ISK: 0,
            NOK: 0,
            HRK: 0,
            RUB: 0,
            TRY: 0,
            AUD: 0,
            BRL: 0,
            CAD: 0,
            CNY: 0,
            HKD: 0,
            IDR: 0,
            ILS: 0,
            INR: 0,
            KRW: 0,
            MXN: 0,
            MYR: 0,
            NZD: 0,
            PHP: 0,
            SGD: 0,
            THB: 0,
            ZAR: 0
        };
    };
    CurrencyConverter.isCurrency = function (currency) {
        return Object.keys(currencies_1.Currencies).indexOf(currency) !== -1;
    };
    return CurrencyConverter;
}());
exports.CurrencyConverter = CurrencyConverter;
//# sourceMappingURL=currency-converter.js.map